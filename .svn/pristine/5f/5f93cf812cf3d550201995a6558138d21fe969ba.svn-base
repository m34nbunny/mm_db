package com.m_mb.mm;

import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import com.mysql.jdbc.CallableStatement;

public class DB {
	
	private String ConnectionString = "";
	
	public DB(String server, String database, String username, String password, String port) {
		if (port == null || port.isEmpty()) {
			port = "3306";
		}
		ConnectionString = "jdbc:mysql://" + server + ":" + port + "/" + database + "?" + "user=" + username + "&password=" + password; 
	}
		  
	public <T> int Add(T data, String procedure, boolean includePrimaryKey) throws IllegalArgumentException, IllegalAccessException {
    	Field[] properties = data.getClass().getFields();
    	for (int i = 0; i < properties.length;i++) {
    		String propertyName = properties[i].getName();
    		Object value = properties[i].get(data);
    		System.out.println(value.toString());
    	}
    	//TODO: Finish up Add method
		return 0;
	}
	
	public <T> void Update(Map<String, Object> data, String procedure) {
    	for (Map.Entry<String, Object> item : data.entrySet()) {
    		String propertyName = item.getKey();
    		Object value = item.getValue();
    		System.out.println(value.toString());
    	}
	}
	
	public <T> void Update(T data, String procedure) throws IllegalArgumentException, IllegalAccessException {
		Field[] properties = data.getClass().getFields();
    	for (int i = 0; i < properties.length;i++) {
    		String propertyName = properties[i].getName();
    		Object value = properties[i].get(data);
    		System.out.println(value.toString());
    	}
	}
	
	public <T> void Remove(Map<String, Object> data, String Procedure) {
		for (Map.Entry<String, Object> item : data.entrySet()) {
    		String propertyName = item.getKey();
    		Object value = item.getValue();
    		System.out.println(value.toString());
    	}
	}
	
	public <T> void Remove(T data, String Procedure) throws IllegalArgumentException, IllegalAccessException {
		Field[] properties = data.getClass().getFields();
    	for (int i = 0; i < properties.length;i++) {
    		String propertyName = properties[i].getName();
    		Object value = properties[i].get(data);
    		System.out.println(value.toString());
    	}
	}
	
	@SuppressWarnings("unchecked")
	public <T> List<T> ReadCollection(Class<T> type, String procedure) throws ClassNotFoundException, SQLException, InstantiationException, IllegalAccessException {
	    Class.forName("com.mysql.jdbc.Driver");
	    Connection connect = DriverManager.getConnection(ConnectionString);
	    CallableStatement statement = (CallableStatement) connect.prepareCall("{call " + procedure + "}");
	    List<Field> properties = new ArrayList<Field>();
	    for (Field field : type.newInstance().getClass().getDeclaredFields()) {
	    	Annotation[] annotations = field.getDeclaredAnnotations();
			boolean isDataParameter = false;
			for (Annotation a : annotations) {
				if (a instanceof DataParameter) {
					isDataParameter = true;
				}
			}
			if (isDataParameter) {
				properties.add(field);	
			}
	    }
	    boolean success = statement.execute();
	    List<T> list = new ArrayList<T>();
	    if (success) {
	    	ResultSet resultSet = statement.getResultSet();
		    while (resultSet.next()) {
		    	Object item = type.newInstance();
		    	for (Field field : properties) {
		    		String propertyName = field.getName();
	    			Object value = resultSet.getString(propertyName);
	    			if (field.getType() == int.class) {
	    				SetInt(item, value, field);
	    			} else if (field.getType() == boolean.class) {
	    				SetBool(item, value, field);
	    			} else if (field.getType() instanceof Class && ((Class<?>)field.getType()).isEnum()) {
	    				SetEnum(item, value, field);
	  				} else {
	  					SetString(item, value, field);
	  				}
		    	}
		    	list.add((T) item);
			}
	    }
	    return (List<T>) list;
	}
	
	private void SetEnum(Object object, Object value, Field field) {
		try {
			Class enumType = field.getType();
			Enum eValue = Enum.valueOf(enumType, (String) value);
			field.set(object, eValue);
		} catch (Exception e) {
			System.out.print(e.getMessage());
		}
	}
	
	private void SetInt(Object object, Object value, Field field) {
		try {
			Integer intValue = Integer.parseInt(value.toString());
			field.set(object, intValue);
		} catch (Exception e) {
			System.out.print(e.getMessage());
		}
	}

	private void SetString(Object object, Object value, Field field) {
		try {
			field.set(object, value);
		} catch (Exception e) {
			System.out.print(e.getMessage());
		}
	}
	
	private void SetBool(Object object, Object value, Field field) {
		try {
			boolean bValue = false;
			if (value.toString().equals("1")) {
				bValue = true;
			}
			field.set(object, bValue);
		} catch (Exception e) {
			System.out.print(e.getMessage());
		}
	}
	
}